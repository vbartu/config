SSH:
	default identity for ssh: ~/.ssh/id_rsa | id_rsa.pub
	ssh-keygen -t ecdsa -b 521 -f filename
	.shh/config host something
		HostName (ip/url), Port, User, IdenityFile (~/.ssh/...)

ss:
	-a (show all), -p (show processes), -t (show tcp ports), -u (udp),
	-x (unix) -l (listening ports)

Linux processes:
	New terminal -> new session -> first job -> only one process (bash)
		commands: processes of the existing job
		subshell: new job, its commands in its job
	controlling terminal (session): original shell stdin and stdout
	only one job in a session is in the foreground
		can read/write the controlling terminal
		jobs background gets SIGTTIN when attempt a reading

Iptables:
  tables (filter, nat, mangle, raw, security)
      -t table, -L (list) -> rules executed top to bottom
  chains (PREROUTING, INPUT, FORWARD, OUTPUT, POSTROUTING)
      -A (append), -I (insert), -D (delete), -C (check)
  rules: iptables -A INPUT -s 192.168.1.55 -j DROP
      -s (source IP/CIDR), -d (destination), -p (protocol name/number)
	  -i, (in interface) -o (out interface)
  target (ACCEPT, DROP, MASQUERADE)
      -j (jump) target, -P (policy) target


Ip:
	ip addr
		add 192.168.0.100/24 broadcast + dev wlan0 
			'+' to infer broadcast address (last address)
		del 192.168.0.100/24 dev wlan0
		flush 192.168.0.100/24 dev wlan0 (deletes all addrs)
	ip route
		ip route add/del PREFIX via address dev wlan0
			PREFIX: either default or CIDR (x.y.z.a/msk)
			address: address or CIDR

DNS:
	/etc/resolv.conf
		nameserver 8.8.8.8
		nameserver 8.8.4.4

Users and groups:
	/etc/passwd
		[user:password:uid:gid:comments:home:shell]
	/etc/group
		[group:password:gid:users]
	/etc/shadow
		[user:$id$salt$hashed:lastchanged:min:max:warn:inactive:expire]
	/etc/gshadow
		[group:$id$salt$hashed:admin-users:users]
	useradd, userdel, usermod, passwd, chpasswd, lastlog
	groupadd, groupdel, groupmems, groupmod, groups, gpasswd, chgpasswd

Bash:
	Redirection:
		stdin  (0): <, <<END {lines} END (here docs), <<< (here strings)
		stdout (1): > (overwrites), >> (appends)
		stderr (2): 2>, 2>&1 (copies out fd), &> (out and err)
		other  (n): [n]<, [n]>, [n]>>
	<, >, |, &&, ||, ;, &(to subshell, bg)
	if [[ ... ]] then ... fi
	while [[ ... ]] do ... done
	source file_with_commands
	* any chars, ? any single char
	variable1=home (string) -> $variable1, ${variable1}
	export variable1 (changing it changes the export)
	really/long/path/{file1,file2}.c
	$? last executed command return value
	functions: foo(){....} (arguments $1, $2, ...), return n
	command substitution: $(string-command)
	arithmetic substitution: $(((3+5)*2)) variables are okey
	subshell: (commands) -> does not affect original shell
	Ctrl Z moves job to bg with SIGTSTP, and a shell job to fg
		jobs, bg N (sends SIGCONT to bg job), fg N (+ job to fg)

Pacman:
  -S -Ss -Syu -Si -Sii
  -Qs -Qi -Ql (list files) -Qo (return the package that owns the file) 
  -Qe (explicit) -Qd (dependencies) -Qdt (unrequired dependencies)
  -R -Rs (remove dependecies) -Rc (recursive upwards)

Journal:
	-t target(app), -b n (n reboot)

RipGrep:
  --no-heading (dont group by file)
  -g (glob, use '!dir' to exclude dir)
  --no-ignore (dont check gitignore like files)
  -. (include hidden files)

Grep:
  -e (patterns) -f (file with patterns)
  -E (extended regexp) -F (fixed string)
  -i (ignore case) -v (invert match)
  -c (show number lines matching)
  -l (shows files containing pattern) -L (not containing)
  -n (show line number)
  -A -B -C (context after, before, both)  
  -I (ignore binary files)
  -r (search recursive in directories)
  --exclude-dir= (exclude directories)
  -o (only matching) -m (max number)
  sort -u (sort and removes duplicates)
  wc -l (return number of lines)

Regular expressions:
  \. match a fullstop
  . match any character (just one)
  [abc] any character inside the brackets
  [^abc] exclude char inside the brackets
  \d [0-9], \w [A-Za-z0-9_], \W [^A-Za-z0-9_]
  a{m} match exactly m repetitions [abc]{3}
  {n,m} match between n and m repetitions
  * {0,inf}, + {1,inf}, ? {0,1}
  \t tab, \n new line, \r carriage return
  \s [ \t\n\r], \S [^ \t\n\r]
  ^ start of line, $ end of line
  \b boundary between word and non word character
  (.*) capture groups for further processing
  (a(b)) nested groups, numbered left to right
  (abc)? checks existence of a group of characters
  (abc|def) conditional selection of a group
  \0 reference to full matched text
  \1 reference to first capture group
  Basic RegExp: +,?,{},(),| needs to be escaped (\)

Byte communication:
  sudo stty -F /dev/ttyACM0 115200 raw -clocal -crtscts
  cat /dev/ttyACM0 | od
  od: -A[x|n] (address) -t[x1c|x4] (output format)
    -w32 (Bytes per line, needed to print) -v (repeated lines)
  echo -n (no \n) -e (escape) "\x00\xff"

Mount .img:
  fdisk -lu file.img
  get offset_in_bytes = sector_offset*sector_size
  sudo mount -o loop,offset=$((512*sec_off)) file.img /mnt

Open Markdown:
	grip -b file (uses python)

ANSI escape codes:
  Intro <Esc>[ -> \033[
  Move cursor UDRL NL PL {n}[ABCDEF],  position {row};{col}H 
  Clear 2J Erase 3J Erase line 2K Scroll Up/Down nS/T
  Color: 256 fg 38;5:{n}m bg 48;5;{n}m options:
    reset bold dim italic underline [01234]m, 8fg30-37m 8bg40-47m

Network setup
	IP (dhcp): systemd-networkd | dhcpcd
	DNS: /etc/resolv.conf | systemd-resolved
	Wifi: iwd

Hardware
	Redpitaya
